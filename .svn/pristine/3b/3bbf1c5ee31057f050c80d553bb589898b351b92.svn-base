require(["components/button/button","logger"],function(a,b){describe("button",function(){it("createButton should return an object with functions insertIntoContainer and viewModelChanged",function(){var b={},c=a.createButton(b);expect(typeof c.insertIntoContainer).toEqual("function"),expect(typeof c.viewModelChanged).toEqual("function")}),describe("insert into container",function(){describe("the html structure created",function(){it("should insert a button element contained by 3 div containers",function(){var b=$("<div></div>"),c,d={};expect(b.children().length).toEqual(0),c=a.createButton(d),c.insertIntoContainer(b),expect(b.children().length).toEqual(1),expect(b.children().children().length).toEqual(1),expect(b.children().children().children().length).toEqual(1),expect(b.children().children().children().children().length).toEqual(1),expect(b.children().children().children().children().is("button")).toEqual(!0)}),it("should put text content inside the button if viewModel.content is a string",function(){var b=$("<div></div>"),c={content:"content"},d;d=a.createButton(c),d.insertIntoContainer(b),expect(b.find("button").text()).toEqual("content")}),it("should throw an exception when viewModel.content is not a string",function(){var b=$("<div></div>"),c={content:1.234},d,e=!1;try{d=a.createButton(c),d.insertIntoContainer(b)}catch(f){e=!0,expect(f instanceof Error).toEqual(!0)}expect(e).toEqual(!0)}),it("should throw an exception when viewModel.content is null",function(){var b=$("<div></div>"),c={content:null},d,e=!1;try{d=a.createButton(c),d.insertIntoContainer(b)}catch(f){e=!0,expect(f instanceof Error).toEqual(!0)}expect(e).toEqual(!0)}),it("should encode the less than sign if it appears in the content",function(){var b=$("<div></div>"),c={content:"abc<xyz"},d;d=a.createButton(c),d.insertIntoContainer(b),expect(b.find("button").text()).toEqual("abc<xyz")}),it("should put a non-breaking space inside the button if the viewModel has no content property",function(){var b=$("<div></div>"),c={},d;d=a.createButton(c),d.insertIntoContainer(b),expect(b.find("button").text()).toEqual("Â ")}),it("should create two buttons with distinct viewModels",function(){var b=$("<div></div>"),c=$("<div></div>"),d={content:"button1"},e={content:"button2"},f,g;f=a.createButton(d),g=a.createButton(e),f.insertIntoContainer(b),g.insertIntoContainer(c),expect(b.find("button").text()).toEqual("button1"),expect(c.find("button").text()).toEqual("button2")})}),describe("css styles",function(){it("should set the arcButton class of the button element",function(){var b=$("<div></div>"),c={},d;d=a.createButton(c),d.insertIntoContainer(b),expect(b.find("button").hasClass("arcButton")).toEqual(!0)}),it("should set the color to the color property",function(){var b=$("<div></div>"),c={fontColor:"#102030"},d;d=a.createButton(c),d.insertIntoContainer(b),expect(b.find("button").css("color")).toEqual("rgb(16, 32, 48)")}),it("should set the background color to the background color property",function(){var b=$("<div></div>"),c={backgroundColor:"#405060"},d;d=a.createButton(c),d.insertIntoContainer(b),expect(b.find("button").css("background-color")).toEqual("rgb(64, 80, 96)")})}),describe("button click event",function(){it("should call the callback in the viewModel when the button is clicked, passing values for isShift and isCtrl",function(){var b=$("<div></div>"),c={content:"original content",onClickCallback:jasmine.createSpy()},d,e;d=a.createButton(c),d.insertIntoContainer(b),e=$.Event("click",{shiftKey:!1,ctrlKey:!0}),b.find("button").trigger(e),expect(c.onClickCallback).toHaveBeenCalledWith(!1,!0),e=$.Event("click",{shiftKey:!0,ctrlKey:!1}),b.find("button").trigger(e),expect(c.onClickCallback).toHaveBeenCalledWith(!0,!1)})})}),describe("viewModelChanged",function(){it("should replace the container content with the new viewModel content",function(){var b=$("<div></div>"),c={content:"original content"},d;d=a.createButton(c),d.insertIntoContainer(b),expect(b.find("button").text()).toEqual("original content"),c.content="Updated content",d.viewModelChanged(),expect(b.find("button").text()).toEqual("Updated content")}),it("should put the new content into a container if insertIntoContainer is called after viewModelChanged",function(){var b=$("<div></div>"),c={content:"content number 1"},d;d=a.createButton(c),c.content="content number 2",d.viewModelChanged(),d.insertIntoContainer(b),expect(b.find("button").text()).toEqual("content number 2")}),it("should log a 'not supported' warning it insertIntoContainer is called for multiple containers",function(){var c=$("<div></div>"),d=$("<div></div>"),e={content:"content"},f;f=a.createButton(e),spyOn(b,"warn"),f.insertIntoContainer(c),f.insertIntoContainer(d),expect(b.warn).toHaveBeenCalled()}),describe("button click event",function(){it("should not call the callback when it has been removed from the viewModel",function(){var b=$("<div></div>"),c=jasmine.createSpy(),d={content:"original content",onClickCallback:c},e;e=a.createButton(d),e.insertIntoContainer(b),b.find("button").trigger("click"),expect(c.calls.length).toEqual(1),delete d.onClickCallback,e.viewModelChanged(),b.find("button").trigger("click"),expect(c.calls.length).toEqual(1)})})})})})